{"remainingRequest":"D:\\Git\\dlz\\Api_Platform\\v_project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Git\\dlz\\Api_Platform\\v_project\\src\\components\\Project_case.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Git\\dlz\\Api_Platform\\v_project\\src\\components\\Project_case.vue","mtime":1663592395299},{"path":"D:\\Git\\dlz\\Api_Platform\\v_project\\node_modules\\babel-loader\\lib\\index.js","mtime":1662281752427},{"path":"D:\\Git\\dlz\\Api_Platform\\v_project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1662281752768},{"path":"D:\\Git\\dlz\\Api_Platform\\v_project\\node_modules\\vue-loader\\lib\\index.js","mtime":1662281758072}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"Project_case\",\r\n  data() {\r\n    return {\r\n      choose_tab_pane:'',\r\n      right_api: false,\r\n      right_configure: false,\r\n      doing_api: '添加好友',\r\n      userable_par: '',\r\n      setting_api: {},\r\n      setting_configure: {},\r\n      dck: [], // 默认选中的节点\r\n      dek: [], //默认展开的节点\r\n      ref: \"tree\",\r\n      tableData: [{name: \"name\", des: 'des'}],\r\n      activeName: \"\", //body中默认显示哪个tab页\r\n      apis: [\r\n        // {id:1,type:'api',label:'接口1号',children:[{id:'1_1',type:'configure',label:'设置1'},{id:'1_2',type:'configure',label:'设置2'},{id:'1_3',type:'configure',label:'设置3'}]},\r\n      ],\r\n      response_data:{\r\n        R:'',  // Response\r\n        RD:'', // ResponseData\r\n        CR:'', // ConfigureResult\r\n      },\r\n    }\r\n  },\r\n  props: [\"project_id\",],\r\n  mounted() {\r\n    document.getElementById('right_id').style.minHeight = (document.documentElement.clientHeight - 240).toString() + 'px';\r\n    document.getElementById('right_id').style.maxHeight = (document.documentElement.clientHeight - 240).toString() + 'px';\r\n    document.getElementById('left_div').style.height = (document.documentElement.clientHeight - 286).toString() + 'px'\r\n    axios.get('http://localhost:8000/get_apis/', {\r\n      params: {\r\n        project_id: this.project_id,\r\n      }\r\n    }).then(res => {\r\n      this.apis = res.data\r\n    });\r\n    // 获取选中的接口\r\n    axios.get('http://localhost:8000/get_dck/', {\r\n      params: {\r\n        project_id: this.project_id,\r\n      }\r\n    }).then(res => {\r\n      this.dck = res.data\r\n    });\r\n\r\n  },\r\n  methods: {\r\n    up_api(){\r\n      axios.get('http://localhost:8000/up_api/',{\r\n        params:{\r\n          api_id:this.setting_api.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_api=false;\r\n        this.dek=[this.setting_api.id]\r\n      })\r\n    },\r\n    down_api(){\r\n      axios.get('http://localhost:8000/down_api/',{\r\n        params:{\r\n          api_id:this.setting_api.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_api=false;\r\n      })\r\n    },\r\n    up_configure(){\r\n      axios.get('http://localhost:8000/up_configure/',{\r\n        params:{\r\n          configure_id:this.setting_configure.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_configure=false;\r\n        this.dek=[parseInt(this.setting_configure.id.split('_')[0])] // 将字符串转换成整形\r\n      })\r\n    },\r\n    down_configure(){\r\n      axios.get('http://localhost:8000/down_configure/',{\r\n        params:{\r\n          configure_id:this.setting_configure.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_configure=false;\r\n        this.dek=[parseInt(this.setting_configure.id.split('_')[0])] // 将字符串转换成整形\r\n      })\r\n    },\r\n    // get_label(label){\r\n    //   if (label.length>12){\r\n    //     var new_label = label.substring(0,12) + '...'\r\n    //   }\r\n    //   else{\r\n    //     var new_label = label\r\n    //   }\r\n    //   return new_label\r\n    //\r\n    // },\r\n    get_label(label){\r\n      return label.substring(0,12) + ( (label.length>12)?'...':'')\r\n    },\r\n    handleCheckChange(data, checked) {\r\n      console.log(data, checked);\r\n      axios.get('http://localhost:8000/set_dck', {\r\n        params: {\r\n          project: this.project_id,\r\n          dck: this.$refs.tree.getCheckedKeys().toString(),\r\n        }\r\n      }).then(res => {\r\n        this.dck = res.data\r\n      })\r\n    },\r\n    // 如果是接口，则展示接口详情页；否则展示配置详情\r\n    set(data) {\r\n      console.log(data)\r\n      if (data.type == 'api') {\r\n        this.right_api = true;\r\n        this.right_configure = false;\r\n        this.setting_api = data;\r\n      } else {\r\n        this.right_api = false;\r\n        this.right_configure = true;\r\n        this.setting_configure = data;\r\n      }\r\n\r\n    },\r\n    // 删除，增加二次确认\r\n    remove(data) {\r\n      if (confirm(\"确定删除吗？\") == false) {\r\n        return\r\n      }\r\n      axios.get('http://localhost:8000/remove_ac', {\r\n        params: {\r\n          project_id: this.project_id,\r\n          id: data.id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data\r\n      })\r\n    },\r\n\r\n\r\n    v_if(data) {\r\n      if (data.type == 'api') {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    handleClick(tab, event) {\r\n      console.log(tab, event)\r\n    },\r\n    // 新增配置后，让该接口展开\r\n    add_configure(data) {\r\n      axios.get('http://localhost:8000/add_configure/', {\r\n        params: {\r\n          project_id: this.project_id,\r\n          id: data.id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data;\r\n        this.dek = [data.id];\r\n      })\r\n\r\n    },\r\n    add_apis() {\r\n      axios.get('http://localhost:8000/add_apis/', {\r\n        params: {\r\n          project_id: this.project_id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data\r\n        this.dek = []\r\n      })\r\n\r\n    },\r\n    save_configure(){\r\n      axios.post('http://localhost:8000/save_configure/',this.setting_configure).then(res=>{\r\n        this.$message({\r\n          message:'保存成功！',\r\n          type:'success'\r\n        })\r\n\r\n      })\r\n\r\n    },\r\n    save_api(){\r\n      axios.post('http://localhost:8000/save_api/',this.setting_api,{\r\n        params:{\r\n          project_id:this.project_id\r\n        }}).then(res=>{\r\n          this.apis=res.data;\r\n          this.$message({\r\n            message:'保存成功',\r\n            type:'success'\r\n          })\r\n      })\r\n    },\r\n    send_api(){\r\n      axios.post('http://localhost:8000/send_api/',this.setting_api,{\r\n        params:{\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.response_data=res.data;\r\n        this.choose_tab_pane='Response';\r\n      })\r\n\r\n    },\r\n    run(){\r\n\r\n    },\r\n    report(){\r\n\r\n    },\r\n\r\n    // 选择配置的方法，切换配置tab页时清空之前选择的方式、值\r\n    choose_configure_method(tab,event){\r\n      console.log(tab,event)\r\n      this.setting_configure.select=''\r\n      this.setting_configure.value=''\r\n      this.setting_configure.method=tab.label;\r\n    },\r\n    // 新增参数\r\n    add_params(){\r\n      this.setting_api.params.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_params(index){\r\n      this.setting_api.params.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_headers(){\r\n      this.setting_api.headers.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_headers(index){\r\n      this.setting_api.headers.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_payload_fd(){\r\n      this.setting_api.payload_fd.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_payload_fd(index){\r\n      this.setting_api.payload_fd.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_payload_xwfu(){\r\n      this.setting_api.payload_xwfu.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_payload_xwfu(index){\r\n      this.setting_api.payload_xwfu.splice(index,1)\r\n    },\r\n\r\n\r\n  }\r\n}\r\n",{"version":3,"sources":["Project_case.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+WA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA","file":"Project_case.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div>\r\n    <el-card id='right_id' style=\"float:right;width:-webkit-calc(100% - 350px);\">\r\n      <div v-if=\"right_api\">\r\n        <el-button @click=\"send_api\" size=\"mini\" type=\"primary\">发送</el-button>\r\n        <el-button @click=\"save_api\" size=\"mini\" type=\"primary\">保存</el-button>\r\n        <el-button @click=\"up_api\" size=\"mini\" type=\"text\">up</el-button>\r\n        <el-button @click=\"down_api\" size=\"mini\" type=\"text\">down</el-button>\r\n        <span style=\"float: right\">接口ID:{{ setting_api.id }}</span><br><br>\r\n        <el-form ref=\"form\" label-width=\"100px\" label-position=\"left\">\r\n          <el-form-item label=\"接口名称/描述\">\r\n            <el-input v-model=\"setting_api.label\" style=\"width: 55%\"></el-input>\r\n            <el-input v-model=\"setting_api.des\" style=\"width: 45%\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"Host\">\r\n            <el-input v-model=\"setting_api.host\"></el-input>\r\n          </el-form-item>\r\n          <el-form-item label=\"方式/路径\">\r\n            <el-select v-model=\"setting_api.method\" style=\"width: 100px\" placeholder=\"请求方式\">\r\n              <el-option label=\"POST\" value=\"POST\"></el-option>\r\n              <el-option label=\"GET\" value=\"GET\"></el-option>\r\n            </el-select>\r\n            <el-input style=\"width: -webkit-calc(100% - 112px)\" v-model=\"setting_api.path\"></el-input>\r\n          </el-form-item>\r\n          <el-tabs type=\"border-card\" v-model=\"choose_tab_pane\">\r\n            <el-tab-pane label=\"Params\">\r\n              <el-table\r\n                  :data=\"setting_api.params\"\r\n                  stripe\r\n                  size=\"mini\"\r\n                  style=\"width: 100%;overflow-y: auto;min-height: 100%\">\r\n                  <el-table-column label=\"参数名\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.key\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column label=\"参数值\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.value\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column label=\"参数描述\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.des\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column>\r\n                    <template slot=\"header\">\r\n                      <el-button size=\"mini\" type=\"primary\" @click=\"add_params\">新增</el-button>\r\n                    </template>\r\n                     <template slot-scope=\"scope\">\r\n                      <el-button size=\"mini\" type=\"danger\" @click=\"del_params(scope.$index)\">删除</el-button>\r\n                    </template>\r\n                  </el-table-column>\r\n              </el-table>\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"Headers\">\r\n              <el-table\r\n                  :data=\"setting_api.headers\"\r\n                  stripe\r\n                  size=\"mini\"\r\n                  style=\"width: 100%;overflow-y: auto;min-height: 100%\">\r\n                  <el-table-column label=\"参数名\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.key\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column label=\"参数值\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.value\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column label=\"参数描述\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.des\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                  <el-table-column>\r\n                    <template slot=\"header\">\r\n                      <el-button size=\"mini\" type=\"primary\" @click=\"add_headers\">新增</el-button>\r\n                    </template>\r\n                     <template slot-scope=\"scope\">\r\n                      <el-button size=\"mini\" type=\"danger\" @click=\"del_headers(scope.$index)\">删除</el-button>\r\n                    </template>\r\n                  </el-table-column>\r\n              </el-table>\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"Body\">\r\n              <el-tabs v-model=\"setting_api.payload_method\" @tab-click=\"handleClick\">\r\n                <el-tab-pane label=\"none\" name=\"none\"><h2 style=\"text-align: center;color: darkgrey\">不传任何参数</h2>\r\n                </el-tab-pane>\r\n                <el-tab-pane label=\"form-data\" name=\"form-data\">\r\n                  <el-table\r\n                      :data=\"setting_api.payload_fd\"\r\n                      stripe\r\n                      size=\"mini\"\r\n                      style=\"width: 100%;overflow-y: auto;min-height: 100%\">\r\n                      <el-table-column label=\"参数名\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.key\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                      <el-table-column label=\"参数值\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.value\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                      <el-table-column label=\"参数描述\" width=\"180\">\r\n                    <template slot-scope=\"scope\">\r\n                      <el-input v-model=\"scope.row.des\"></el-input>\r\n                    </template>\r\n                  </el-table-column>\r\n                      <el-table-column>\r\n                          <template slot=\"header\">\r\n                            <el-button size=\"mini\" type=\"primary\" @click=\"add_payload_fd\">新增</el-button>\r\n                          </template>\r\n                           <template slot-scope=\"scope\">\r\n                            <el-button size=\"mini\" type=\"danger\" @click=\"del_payload_fd(scope.$index)\">删除</el-button>\r\n                          </template>\r\n                      </el-table-column>\r\n                  </el-table>\r\n                </el-tab-pane>\r\n                <el-tab-pane label=\"x-www-form-urlencode\" name=\"x-www-form-urlencode\">\r\n                  <el-table\r\n                      :data=\"setting_api.payload_xwfu\"\r\n                      stripe\r\n                      size=\"mini\"\r\n                      style=\"width: 100%;overflow-y: auto;min-height: 100%\">\r\n                      <el-table-column label=\"参数名\" width=\"180\">\r\n                  <template slot-scope=\"scope\">\r\n                    <el-input v-model=\"scope.row.key\"></el-input>\r\n                  </template>\r\n                </el-table-column>\r\n                      <el-table-column label=\"参数值\" width=\"180\">\r\n                  <template slot-scope=\"scope\">\r\n                    <el-input v-model=\"scope.row.value\"></el-input>\r\n                  </template>\r\n                </el-table-column>\r\n                      <el-table-column label=\"参数描述\" width=\"180\">\r\n                  <template slot-scope=\"scope\">\r\n                    <el-input v-model=\"scope.row.des\"></el-input>\r\n                  </template>\r\n                </el-table-column>\r\n                      <el-table-column>\r\n                  <template slot=\"header\">\r\n                    <el-button size=\"mini\" type=\"primary\" @click=\"add_payload_xwfu\">新增</el-button>\r\n                  </template>\r\n                   <template slot-scope=\"scope\">\r\n                    <el-button size=\"mini\" type=\"danger\" @click=\"del_payload_xwfu(scope.$index)\">删除</el-button>\r\n                  </template>\r\n                </el-table-column>\r\n                  </el-table>\r\n                </el-tab-pane>\r\n                <el-tab-pane label=\"raw\" name=\"raw\">\r\n                  <el-select v-model=\"setting_api.payload_raw_method\" style=\"z-index:999;position:fixed;right:42px;width: 130px\"\r\n                             placeholder=\"Text\">\r\n                    <el-option label=\"Text\" value=\"Text\"></el-option>\r\n                    <el-option label=\"JavaScript\" value=\"JavaScript\"></el-option>\r\n                    <el-option label=\"JSON\" value=\"JSON\"></el-option>\r\n                    <el-option label=\"XML\" value=\"XML\"></el-option>\r\n                    <el-option label=\"HTML\" value=\"HTML\"></el-option>\r\n                  </el-select>\r\n                  <el-input v-model=\"setting_api.payload_raw\" type=\"textarea\" :rows=\"5\"></el-input>\r\n                </el-tab-pane>\r\n                <el-tab-pane label=\"binary\" name=\"binary\">\r\n                  <el-upload\r\n                      class=\"upload-demo\"\r\n                      drag\r\n                      action=\"https://jsonplaceholder.typicode.com/posts/\"\r\n                      multiple>\r\n                    <i class=\"el-icon-upload\"></i>\r\n                    <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\r\n                    <div class=\"el-upload__tip\" slot=\"tip\">只能上传jpg/png文</div>\r\n                  </el-upload>\r\n                </el-tab-pane>\r\n                <el-tab-pane label=\"GraphQL\" name=\"GraphQL\">\r\n                  <el-input v-model=\"setting_api.payload_GQL_q\" type=\"textarea\" :rows=\"6\" style=\"width: 65%\" placeholder=\"QUERY\"></el-input>\r\n                  <el-input v-model=\"setting_api.payload_GQL_g\" type=\"textarea\" :rows=\"6\" style=\"width: 35%\" placeholder=\"GRAPHQL VARIABLES\"></el-input>\r\n                </el-tab-pane>\r\n              </el-tabs>\r\n            </el-tab-pane>\r\n            <el-tab-pane name=\"Response\" label=\"Response\">\r\n              <el-input v-model=\"response_data.R\" type=\"textarea\" style=\"height: 100%\" :rows=\"6\"></el-input>\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"ResponseData\">\r\n              <el-input v-model=\"response_data.RD\" type=\"textarea\" style=\"height: 100%\" :rows=\"6\"></el-input>\r\n            </el-tab-pane>\r\n            <el-tab-pane label=\"ConfigureResult\">\r\n              <el-input v-model=\"response_data.CR\" type=\"textarea\" style=\"height: 100%\" :rows=\"6\"></el-input>\r\n            </el-tab-pane>\r\n          </el-tabs>\r\n        </el-form>\r\n      </div>\r\n      <div v-else-if=\"right_configure\">\r\n        <el-button size=\"mini\" type=\"primary\" @click=\"save_configure\">Save</el-button>\r\n        <el-button size=\"mini\" type=\"text\" @click=\"up_configure\">up</el-button>\r\n        <el-button size=\"mini\" type=\"text\" @click=\"down_configure\">down</el-button>\r\n        &#12288 <span style=\"float:right;\">配置ID: {{ setting_configure.id }}</span>\r\n        <br>\r\n        &#12288 <span>执行时机：</span>\r\n        <el-select v-model=\"setting_configure.do_time\" placeholder=\"请选择\" style=\"width: 90px\">\r\n          <el-option label=\"before\" value=\"before\"></el-option>\r\n          <el-option label=\"after\" value=\"after\"></el-option>\r\n        </el-select>\r\n        &#12288 <span>配置名称：</span>\r\n        <el-input style=\"width:-webkit-calc(100% - 299px)\" v-model=\"setting_configure.label\"></el-input>\r\n        <br><br>\r\n        <el-tabs v-model=\"setting_configure.method\" @tab-click=\"choose_configure_method\" tab-position=\"left\" style=\"height: 100%\">\r\n<!--          <el-tab-pane label=\"仅运行\">-->\r\n<!--            <span class=\"smallfont\">帮助：选中此项后，其他配置不再运行！</span>-->\r\n<!--          </el-tab-pane>-->\r\n          <el-tab-pane name=\"断言\" label=\"断言\">\r\n            <el-select v-model=\"setting_configure.select\" style=\"width: 120px\">\r\n              <el-option label=\"全值检索\" value=\"全值检索\"></el-option>\r\n              <el-option label=\"正则匹配\" value=\"正则匹配\"></el-option>\r\n              <el-option label=\"路径匹配\" value=\"路径匹配\"></el-option>\r\n              <el-option label=\"SQL断言\" value=\"SQL断言\"></el-option>\r\n            </el-select>\r\n            <el-input v-model=\"setting_configure.value\" placeholder=\"请输入表达式、sql语句\" style=\"width: -webkit-calc(100% - 175px )\"></el-input>\r\n            <br>\r\n            <p>帮助</p>\r\n            <p>1.全值检索：在整个返回值当中，是否存在目标字符串。（.find()） * </p>\r\n            <p>2.正则匹配：需要用户写左边界右边界和匹配正则表达式。也是只检索字符串。**</p>\r\n            <p>3.路径匹配：用户写路径和目标的类型和值。* ** （只能是json返回值才可用）</p>\r\n            <p>4.sql断言：用户写sql原生语句和目标值。* * *</p>\r\n            <p>例子：{\"errorCode\":200,\"data\":[{\"name\":\"lisi\"},{\"name\":\"zhangsan\"},{\"name\":\"wang\"}]}\r\n            <p>&#12288;全值检索：zhangsan</p>\r\n            <p>&#12288;正则匹配：name\":\"(.*?)\"}==zhangsan</p>\r\n            <p>&#12288;路径匹配：[\"data\"][1][\"name\"]==\"zhangsan\"</p>\r\n            <p>&#12288;sql断言：select name from 表 where id=5; == \"zhangsan\"</p>\r\n            <p>&#12288;sql断言：select name from 表 where name='zhangsan'; (结果是否为0)</p>\r\n\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"提取\" label=\"提取\">\r\n            <el-select v-model=\"setting_configure.select\" style=\"width: 120px\">\r\n              <el-option label=\"路径提取\" value=\"路径提取\"></el-option>\r\n              <el-option label=\"正则提取\" value=\"正则提取\"></el-option>\r\n              <el-option label=\"sql提取\" value=\"sql提取\"></el-option>\r\n            </el-select>\r\n            <el-input v-model=\"setting_configure.value\" placeholder=\"请输入表达式、sql查询语句\" style=\"width: -webkit-calc(100% - 175px )\"></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>1.路径提取：用户写变量名=路径。仅限json</p>\r\n            <p>2.正则提取：用户写变量名=左边界(.*?)右边界</p>\r\n            <p>3.sql提取：用户写变量名=sql select 查询语句 ，还要加下标。（默认0）</p>\r\n\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"SQL增删改\" label=\"SQL增删改\">\r\n            <el-input type=\"textarea\" :rows=\"5\" v-model=\"setting_configure.value\" placeholder=\"请输入需要执行的sql语句\"></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>一般用来执行某个特殊的需求，如修改、增加、删除等。用户手写sql语句即可，没有返回结果</p>\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"随机变量\" label=\"随机变量\">\r\n            <el-input v-model=\"setting_configure.value\" placeholder=\"请按照下面要求，输入表达式\" ></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>1.常数：a=5, a=8.55, a=\"呵呵\", a=[1,2,3] </p>\r\n            <p>2.随机整数：a=randint(1,10)+2-3-12 #随机生成1-10之内的某个数.</p>\r\n            <p>3.时间戳：a=time.time()</p>\r\n            <p>4.身份证：a=IDcard()</p>\r\n            <p> 5.地址：a=random_adress()</p>\r\n            <p></p>\r\n            <p></p>\r\n\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"mock\" label=\"mock\">\r\n            <el-select v-model=\"setting_configure.select\" style=\"width: 120px\">\r\n              <el-option label=\"写死返回值\" value=\"写死返回值\"></el-option>\r\n              <el-option label=\"第三方接口\" value=\"第三方接口\"></el-option>\r\n            </el-select>\r\n            <el-input type=\"textarea\" :rows=\"8\" v-model=\"setting_configure.value\" placeholder=\"请输入返回值、接口请求等\" ></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>1.选择写死返回值，可直接粘贴返回值到上面的多行文本框，点击保存即可</p>\r\n            <p>2.第三方接口，请依次每行输入：url、header字典、请求体、</p>\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"插入参数\" label=\"插入参数\">\r\n            <el-select v-model=\"setting_configure.select\" style=\"width: 150px\">\r\n              <el-option label=\"request_header\" value=\"request_header\"></el-option>\r\n              <el-option label=\"params\" value=\"params\"></el-option>\r\n              <el-option label=\"request_body\" value=\"request_body\"></el-option>\r\n            </el-select>\r\n            <el-input  v-model=\"setting_configure.value\" placeholder=\"请输入表达式\" style=\"width: -webkit-calc(100% - 205px )\" ></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>比如：a=55</p>\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"加密参数\" label=\"加密参数\">\r\n             <el-select v-model=\"setting_configure.select\" style=\"width: 150px\" placeholder=\"插入位置\">\r\n              <el-option label=\"request_header\" value=\"request_header\"></el-option>\r\n              <el-option label=\"params\" value=\"params\"></el-option>\r\n            </el-select>\r\n            <el-input  v-model=\"setting_configure.value\" placeholder=\"请输入表达式\" style=\"width: -webkit-calc(100% - 205px )\" ></el-input>\r\n            <br>\r\n            <p>帮助：</p>\r\n            <p>例如：sign = python能执行的加密算法， 其中可以使用接口的全部位置的参数,函数(md5,shar1)</p>\r\n          </el-tab-pane>\r\n          <el-tab-pane name=\"草稿\" label=\"草稿\">\r\n            <el-input type=\"textarea\" :rows=\"10\" placeholder=\"请随意使用该文本框\"></el-input>\r\n            <p>帮助：临时存放粘贴数据</p>\r\n          </el-tab-pane>\r\n\r\n\r\n        </el-tabs>\r\n      </div>\r\n      <div v-else=\"\">请点击左侧设置节点...</div>\r\n    </el-card>\r\n    <h1>接口用例页 &#12288\r\n      <el-button size=\"mini\" type=\"primary\" @click=\"add_apis\">新增接口</el-button>\r\n    </h1>\r\n    <el-tree\r\n        id=\"left_div\"\r\n        style=\"width:300px;overflow-y: auto\"\r\n        :data=\"apis\"\r\n        show-checkbox\r\n        node-key=\"id\"\r\n        :check-strictly=\"true\"\r\n        :default-checked-keys=\"dck\"\r\n        :default-expanded-keys=\"dek\"\r\n        @check-change=\"handleCheckChange\">\r\n      <span slot-scope=\"{data}\">\r\n<!--        <span size=\"mini\">{{ data.label }} &#12288</span>-->\r\n        <span size=\"mini\" v-text=\"get_label(data.label)\"></span>&nbsp;\r\n        <el-button\r\n            type=\"text\"\r\n            size=\"mini\"\r\n            @click=\"() => set(data)\"\r\n            style=\"color: darkturquoise\">\r\n              设置\r\n        </el-button>\r\n        <el-button\r\n            v-if=\"v_if(data)\"\r\n            type=\"text\"\r\n            size=\"mini\"\r\n            @click=\"() => add_configure(data)\"\r\n            style=\"color: darkgreen\">\r\n              增加\r\n        </el-button>\r\n        <el-button\r\n            type=\"text\"\r\n            size=\"mini\"\r\n            @click=\"() => remove(data)\">\r\n              删除\r\n        </el-button>\r\n\r\n      </span>\r\n    </el-tree>\r\n\r\n\r\n    <el-card style=\"position: fixed;bottom: 15px;width:-webkit-calc(100% - 240px);min-height:100px;\">\r\n      <el-input v-model=\"userable_par\" type=\"textarea\" :row=\"5\" style=\"float:right;width: -webkit-calc(100% - 300px)\"\r\n                placeholder=\"当前可用变量\"></el-input>\r\n      <el-button size=\"mini\" type=\"success\">执行</el-button> &nbsp;<span>正在执行：</span> <span\r\n        style=\"color: #42b983\">{{ doing_api }}...</span>\r\n      <br>\r\n      <el-button style=\"margin-top: 10px\" size=\"mini\" type=\"primary\">报告</el-button> &nbsp;<span>执行结果：</span>\r\n      <strong><span style=\"color: darkgreen\">成功</span><br></strong>\r\n\r\n\r\n    </el-card>\r\n\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"Project_case\",\r\n  data() {\r\n    return {\r\n      choose_tab_pane:'',\r\n      right_api: false,\r\n      right_configure: false,\r\n      doing_api: '添加好友',\r\n      userable_par: '',\r\n      setting_api: {},\r\n      setting_configure: {},\r\n      dck: [], // 默认选中的节点\r\n      dek: [], //默认展开的节点\r\n      ref: \"tree\",\r\n      tableData: [{name: \"name\", des: 'des'}],\r\n      activeName: \"\", //body中默认显示哪个tab页\r\n      apis: [\r\n        // {id:1,type:'api',label:'接口1号',children:[{id:'1_1',type:'configure',label:'设置1'},{id:'1_2',type:'configure',label:'设置2'},{id:'1_3',type:'configure',label:'设置3'}]},\r\n      ],\r\n      response_data:{\r\n        R:'',  // Response\r\n        RD:'', // ResponseData\r\n        CR:'', // ConfigureResult\r\n      },\r\n    }\r\n  },\r\n  props: [\"project_id\",],\r\n  mounted() {\r\n    document.getElementById('right_id').style.minHeight = (document.documentElement.clientHeight - 240).toString() + 'px';\r\n    document.getElementById('right_id').style.maxHeight = (document.documentElement.clientHeight - 240).toString() + 'px';\r\n    document.getElementById('left_div').style.height = (document.documentElement.clientHeight - 286).toString() + 'px'\r\n    axios.get('http://localhost:8000/get_apis/', {\r\n      params: {\r\n        project_id: this.project_id,\r\n      }\r\n    }).then(res => {\r\n      this.apis = res.data\r\n    });\r\n    // 获取选中的接口\r\n    axios.get('http://localhost:8000/get_dck/', {\r\n      params: {\r\n        project_id: this.project_id,\r\n      }\r\n    }).then(res => {\r\n      this.dck = res.data\r\n    });\r\n\r\n  },\r\n  methods: {\r\n    up_api(){\r\n      axios.get('http://localhost:8000/up_api/',{\r\n        params:{\r\n          api_id:this.setting_api.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_api=false;\r\n        this.dek=[this.setting_api.id]\r\n      })\r\n    },\r\n    down_api(){\r\n      axios.get('http://localhost:8000/down_api/',{\r\n        params:{\r\n          api_id:this.setting_api.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_api=false;\r\n      })\r\n    },\r\n    up_configure(){\r\n      axios.get('http://localhost:8000/up_configure/',{\r\n        params:{\r\n          configure_id:this.setting_configure.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_configure=false;\r\n        this.dek=[parseInt(this.setting_configure.id.split('_')[0])] // 将字符串转换成整形\r\n      })\r\n    },\r\n    down_configure(){\r\n      axios.get('http://localhost:8000/down_configure/',{\r\n        params:{\r\n          configure_id:this.setting_configure.id,\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.apis=res.data;\r\n        this.right_configure=false;\r\n        this.dek=[parseInt(this.setting_configure.id.split('_')[0])] // 将字符串转换成整形\r\n      })\r\n    },\r\n    // get_label(label){\r\n    //   if (label.length>12){\r\n    //     var new_label = label.substring(0,12) + '...'\r\n    //   }\r\n    //   else{\r\n    //     var new_label = label\r\n    //   }\r\n    //   return new_label\r\n    //\r\n    // },\r\n    get_label(label){\r\n      return label.substring(0,12) + ( (label.length>12)?'...':'')\r\n    },\r\n    handleCheckChange(data, checked) {\r\n      console.log(data, checked);\r\n      axios.get('http://localhost:8000/set_dck', {\r\n        params: {\r\n          project: this.project_id,\r\n          dck: this.$refs.tree.getCheckedKeys().toString(),\r\n        }\r\n      }).then(res => {\r\n        this.dck = res.data\r\n      })\r\n    },\r\n    // 如果是接口，则展示接口详情页；否则展示配置详情\r\n    set(data) {\r\n      console.log(data)\r\n      if (data.type == 'api') {\r\n        this.right_api = true;\r\n        this.right_configure = false;\r\n        this.setting_api = data;\r\n      } else {\r\n        this.right_api = false;\r\n        this.right_configure = true;\r\n        this.setting_configure = data;\r\n      }\r\n\r\n    },\r\n    // 删除，增加二次确认\r\n    remove(data) {\r\n      if (confirm(\"确定删除吗？\") == false) {\r\n        return\r\n      }\r\n      axios.get('http://localhost:8000/remove_ac', {\r\n        params: {\r\n          project_id: this.project_id,\r\n          id: data.id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data\r\n      })\r\n    },\r\n\r\n\r\n    v_if(data) {\r\n      if (data.type == 'api') {\r\n        return true\r\n      } else {\r\n        return false\r\n      }\r\n    },\r\n    handleClick(tab, event) {\r\n      console.log(tab, event)\r\n    },\r\n    // 新增配置后，让该接口展开\r\n    add_configure(data) {\r\n      axios.get('http://localhost:8000/add_configure/', {\r\n        params: {\r\n          project_id: this.project_id,\r\n          id: data.id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data;\r\n        this.dek = [data.id];\r\n      })\r\n\r\n    },\r\n    add_apis() {\r\n      axios.get('http://localhost:8000/add_apis/', {\r\n        params: {\r\n          project_id: this.project_id,\r\n        }\r\n      }).then(res => {\r\n        this.apis = res.data\r\n        this.dek = []\r\n      })\r\n\r\n    },\r\n    save_configure(){\r\n      axios.post('http://localhost:8000/save_configure/',this.setting_configure).then(res=>{\r\n        this.$message({\r\n          message:'保存成功！',\r\n          type:'success'\r\n        })\r\n\r\n      })\r\n\r\n    },\r\n    save_api(){\r\n      axios.post('http://localhost:8000/save_api/',this.setting_api,{\r\n        params:{\r\n          project_id:this.project_id\r\n        }}).then(res=>{\r\n          this.apis=res.data;\r\n          this.$message({\r\n            message:'保存成功',\r\n            type:'success'\r\n          })\r\n      })\r\n    },\r\n    send_api(){\r\n      axios.post('http://localhost:8000/send_api/',this.setting_api,{\r\n        params:{\r\n          project_id:this.project_id,\r\n        }\r\n      }).then(res=>{\r\n        this.response_data=res.data;\r\n        this.choose_tab_pane='Response';\r\n      })\r\n\r\n    },\r\n    run(){\r\n\r\n    },\r\n    report(){\r\n\r\n    },\r\n\r\n    // 选择配置的方法，切换配置tab页时清空之前选择的方式、值\r\n    choose_configure_method(tab,event){\r\n      console.log(tab,event)\r\n      this.setting_configure.select=''\r\n      this.setting_configure.value=''\r\n      this.setting_configure.method=tab.label;\r\n    },\r\n    // 新增参数\r\n    add_params(){\r\n      this.setting_api.params.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_params(index){\r\n      this.setting_api.params.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_headers(){\r\n      this.setting_api.headers.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_headers(index){\r\n      this.setting_api.headers.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_payload_fd(){\r\n      this.setting_api.payload_fd.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_payload_fd(index){\r\n      this.setting_api.payload_fd.splice(index,1)\r\n    },\r\n    // 新增参数\r\n    add_payload_xwfu(){\r\n      this.setting_api.payload_xwfu.push( {} )\r\n    },\r\n    // 删除参数\r\n    del_payload_xwfu(index){\r\n      this.setting_api.payload_xwfu.splice(index,1)\r\n    },\r\n\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.smallfont {\r\n  font-size: xx-small;\r\n  color: gray;\r\n}\r\nP{\r\n  font-size: xx-small;\r\n  color: gray;\r\n}\r\n</style>"]}]}